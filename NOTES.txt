Skip to content
This repository
Search
Pull requests
Issues
Gist
 @smacchia
 Unwatch 1
  Star 0
  Fork 0 smacchia/web-training
 Code  Issues 0  Pull requests 0  Projects 0  Wiki  Pulse  Graphs  Settings
Branch: learn/smacchiaâ€¦ Find file Copy pathweb-training/NOTES.txt
b169dfa  2 hours ago
 Susan Macchia V2.2
0 contributors
RawBlameHistory    
257 lines (204 sloc)  8.87 KB
NOTES:

    <!-- Order of specificity:
        /* Type selectors */
        li {}
        li a {} /* chaining */
        li + a {}  /* sibling */

        /* Class, attributie, & pseudo-class selectors */
        .hello {}
        input[type="text"] {}
        a:hover /* pseudo class selector */
        input: checked  /* ditto */

        /* Id Selectors */
        #special {}


    -->
Always falsy:
    false
    0
    ""
    null
    undefined
    NaN

Everything else is Truthy

ARRAYs
    push/pop add to add/remove at the end of the array
    shift/unshift remove/add to the beginning of the array

    nexted arrays:
    var foo = [
        [1, 2, 3].
        [4, 5, 6],
        [7, 8, 10]
    ]

Resources/libraries:
    underscorejs
        Has manu useful objects
        Everything starts with "_"

DOM
    To see dom structure in console type: console.dir(document)

    5 important document methods:
        document.getElementById()
        document.getElementsByClassName()
        document.getElementsByTagName()
        document.querySelector()
        document.querySelectorForAll()

Manipulating elements using CSS:
    tag = document.querySelector("<whatever>")
    // Add a class to the selected element
    tag.classList.add("<class in css>")

    // remove a class from the selected element
    tag.classList.remove("<class in css that was added>")

    // toggle a class off and on
    tag.classList.toggle("<class in css>")

Code along for changing all links in a document:
    var links = document.getElementsByTagName("a");
    for (var i = 0; i < links.length; i++) {
         var href = links[i].getAttribute("href");
         console.log(href);
         if (href != null) {
              links[i].setAttribute("href", "http://www.sbmgarden.com");
         }
    }


JQUERY
    google: 
        cdn jquery 
            to find the various versions
        $ is jquery and used to select, instead of document.get*
            replaces all, and works like querySelectorAll, and always returns a list
        .css(property, value) appended to $("<whatever>") to change the 
            $("h1").css("color", "green") 
                OR
            document.querySelector("h1").style.color = "green"

            .css is more powerful; can pass in an object of styles
                can style multiple elements at once, since $() returns a list and then .css(styles) applies to all of them.

            can use a psuedo selector, like "div:first" or "div:first-of-type"

        .text
            like textContent in regular js
        .html
            inner html, retreive and set (groups of items)
            Can't use text() to change html
        .attr()
            short for attribute, retrieves value of an attribute, or set an attribute
        .val()
            Any kind of input or menu.
            get/set the current value (wrapper for js .value)
        .addClass/.removeClass
            Add/remove classes to any element. Input is a single class or multiple like:
                "class1 class2", etc.
        .toggleClass
            Add/remove classes to an element based on whether it's present or not.

        EVENTS
            Most widely used events are
                click()
                    $("#submit").click(function() {...});
                    // Adds a click listener to the SINGLE element with an id of 'submit'
                    $('button').click(function() {});
                    // Adds a click listenter when ANY button is clicked
                keypress() // for input type elements
                    function will get an event
                on() 
                    // used the most; similar to addEventListener and takes the name of the 
                    // event.
                    // on() can be used instead of the others
                    // on() automatically adds the click listeners to future elements
                    // of the same type/class - this is useful for things like a todo list.

                Inside the callback, use $(this), the jQuery wrapper to access 'this'

                keydown/up gives what keys were pressed, keypress gives the character

        Effects/Animations
            fading
                fadeIn/Out/Toggle

            slides
                slideIn/Out/Toggle

BACK-END
========
Node js console
    way to look at the javascript; no UI for this.

    REPL - Read, evaluate, print loop

    No document, alert, or any of that since that's client side

    With node, js can be executed by using the node command
        node <filename>
NPM
    All packages installed inside node_modules
    require() used to import it.

    package.json - all npm packages have this file
        json -> javascript object noation
    
    node_modules is not part of the git source, npm creates it and everything
    in the json that says what are the dependencies

    npm init creates a package.json for us and walks through creating the package.json

    --save
        Takes the package name and version and saves it into the package.json

    Initializing projects:
        npm init
        npm install <package> --save 
            <repeat>

EXPRESS light wt web framework
ROUTES in javascript
    * global url
    route parameters are created by prefixing with ':'

    Rendering HTML & Templates
    --------------------------
        Most files are dynamic instead of plain html/css

        EJS - embedded javascript (logic inside html)
        Express looks for ejs files in the "views" directory; needs the ejs package for this
        Plain EJS files that only contain html, is very static.

        Let's us embed javascript inside html:
            <%= %> 
                Performs evaluation of something to be added to html
            <% %>
                Just logic where stuff is not to be added to the html

            embed javascript inside here in the html and ejs will treat it as js.

            This allows content to be dynamic based on backend data.

        Styles & Partials
            Can use embedded stylesheet in ejs, but this isn't the best. Better to use an 
            external stylesheet. 

            Usually put .css files in public

            Anything but views directory need to be told to express via use():
                app.use(express.static("public"));

            Also, the render method needs the ejs file to be <file>.ejs UNLESS we tell
            express what the view engine is, then the .ejs can be omitted:
                app.set("view engine", "ejs")

            Partials are files that can be included in other files

    Post requests
        See example in MoreExpress/PostRequestDemo
        
    APIs
        JSON - javascript object notation
            different in that you need quotes around keys

        curl is used to create http requests at the command line

        Simple to use for first exercise is github.com/request/request

        Json queries return a string and need to use JSON.parse to turn it
        into an object with keys that are strings of the elements in the
        json

    Databases
        MongoDB, OO/JSON db, popular when paired with express and angular. Called the MEAN stack (Mongo, Express, Angular, Node).

        Mongodb 
            mongod --dbpath=./data
                start the db server; wait till it's listening on a port
            mongo
                console for mongo db
                'use' creates a database if one doesn't exist
                use demo
                    create demo database
                    Can insert collection immeidate.

                    db.dogs.insert({name: "rusty", breed: "mutt"})
                        db - database that is current
                        dogs - the collection that will exist
                        insert - data to insert
                    show collections
                        show all collections in the db
                    db.dogs.find() or db.dogs.find({name:"JC"}) // for instance
                        Shows what's in the dogs collection
                            id - generated by mongo
                    db.dogs.update({name:"JD"}, {$set: {breed: "dog"}})
                        Update without eliminating other fields in the object. If instead:
                            db.dogs.update({name: "JD"}, {breed: "dog"})
                                the only thing in the db will be the breed.
                            db.dogs.remove({breed: "dog"})

                            db.dogs.remove({breed: "dog"}).limit(1)
                                Remove only the first one of this kind found.
                show dbs
                    Shows all the databases
                use <db>
                    Switches the current db to the input one
                show collections
                    Shows all the collections in the db
                db.<collection>.drop()
                    deletes all the data in a collection

        Mongoosejs.com - mongo db object modeling for node.js

RESTFUL ROUTES

    name      url                 verb     mongoose         description
    ======================================================  ===========
    INDEX    /somethings          GET     <model>.find      display a list of all <somethings>
    NEW      /somethings/new      GET     N/A               Displays form to make a new <somethings>
    CREATE   /somethings          POST    <model>.create    Add a new <something> to DB, then redirect
    SHOW     /somethings/:id      GET     <model>.findById  Shows info about 1 <something>
    EDIT     /somethings/:id/edit GET     <model>.findById  Show edit form for 1 <something>
    UPDATE   /somethings/:id      PUT     findByIdAndUpdate Update a specific <something>, then redirect
    DESTROY  /somethings/:id      DELETE  findByIdAndRemove Delete a particular <something>, then redirect

REST - mapping between http routes and CRUD
    Create
    Read
    Update
    Destroy

Nesting routes:
    for instance adding something new to a detail/show route:
        NEW skiarea/:id/comments/new
        CREATE skiarea/:id/comments
